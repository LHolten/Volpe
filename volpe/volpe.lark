block: _LINESEP* (value (_LINESEP+ value)* _LINESEP*)?

?value: value1
    | shape "=" value1 -> assign
    | token "+=" value1 -> add_assign
    | token "-=" value1 -> sub_assign
    | token "/=" value1 -> div_assign
    | token "*=" value1 -> mul_assign
    // | token "%=" value1 -> mod_assign
    // | toekn "**=" value1 -> power_assign

?value1: value2
    | value2 "->" value1 -> implication
    | "(" (shape ("," shape)*)? ")" "=>" value1 -> func
    | shape "=>" value1 -> func
    | "$" value1 -> func

?value2: value3
    | value2 "||" value3 -> logic_or

?value3: value4
    | value3 "&&" value4 -> logic_and

?value4: value5
    | ":>" value1 -> returnn

?value5: value6
    | value5 "==" value6 -> equals
    | value5 "!=" value6 -> not_equals

?value6: value7
    | value6 "<=" value7 -> less_equals
    | value6 ">=" value7 -> greater_equals
    | value6 "<" value7 -> less
    | value6 ">" value7 -> greater

?value7: value8
    | value7 "+" value8 -> add
    | value7 "-" value8 -> sub

?value8: value9
    | value8 "/" value9 -> div
    | value8 "%" value9 -> mod
    | value8 "*" value9 -> mul
    // | value8 "**" value9 -> power

?value9: value10
    | "-" value9 -> negate
    | "!" value9 -> logic_not
    | "~" value9 -> convert
    // | value2 ".." value2 -> number_list
    // | value2 "::" value2 -> map

?value10: func
    | "{" block "}"
    | "(" value1 ")"
    | "[" (value1 ("," value1)*)? "]" -> collect_tuple
    | INTEGER -> integer
    | FLOATING -> floating
    // | ESCAPED_STRING -> string

func: CNAME -> symbol
    | func "(" (value1 ("," value1)*)? ")" -> func_call
    // | func value1 -> func_call
    | "@" -> this_func

?shape: token
    | "[" shape ("," shape)* "]" -> shape
token: CNAME

%import common.ESCAPED_STRING
%import common.INT
%import common.CR
%import common.LF
%import common.CNAME
%ignore WS
WS: /[ \t\f]/+

INTEGER: INT
FLOATING: INT "." INT

MULTILINE_COMMENT: "#!" /((?!!#).|\n)*/ "!#" " "*
COMMENT: "#" /.*/
NEWLINE: (CR? LF)

_LINESEP: MULTILINE_COMMENT NEWLINE
    | COMMENT NEWLINE
    | NEWLINE
    | ";"