?block: (value_ass? _COM? _SEP)* result _COM?

?value_ass: value1 ":=" value1 -> assign
    | value1 "+=" value1 -> add_assign
    | value1 "-=" value1 -> sub_assign
    | value1 "/=" value1 -> div_assign
    | value1 "*=" value1 -> mul_assign
    | value1 "%=" value1 -> mod_assign
    | value1 "->" value1 -> if_then

?result: object (_COM? _SEP)*
    | () -> object

?value1: object
    | () -> object

?object: value2
    | (item | value2) ("," _SEP* (item | value2))+ -> object
    | item -> object

item: CNAME ":" _SEP* value2 -> item

?value2: value3
    | value2 "->" value3 -> implication

?value3: value4
    | value3 "||" value4 -> logic_or

?value4: value5
    | value4 "&&" value5 -> logic_and

?value5: value6
    | value5 "=" value6 -> equals
    | value5 "!=" value6 -> not_equals

?value6: value7
    | value7 (COMP_TYPE value7)+ -> chain_comp

?value7: value8
    | value7 "+" value8 -> add
    | value7 "-" value8 -> sub

?value8: value9
    | value8 "/" value9 -> div
    | value8 "%" value9 -> mod
    | value8 "*" value9 -> mul

?value9: value10
    | "-" value9 -> negate
    | "!" value9 -> logic_not
    | "~" value9 -> convert_flt
    | "&" value9 -> make_pointer

?value10: symbol
    | INTEGER -> integer
    | CHARACTER -> character
    | ESCAPED_CHARACTER -> escaped_character
    | HEX_CHARACTER -> escaped_character
    | ESCAPED_STRING -> string
    | "(" value1 ")" "{" block "}" -> func
    | "{" block "}"
    | "(" _SEP* value1 _SEP* ")"
    | "|" value10 "|" -> array_size
    | "[" (_SEP* value2 ("," _SEP* value2)*)? _SEP* "]" -> array
    | "[" _SEP* value2 _SEP* ";" _SEP* INTEGER _SEP* "]" -> constant_array
    | "[" _SEP* value2 _SEP* ";" _SEP* "|" value10 "|" _SEP* "]" -> constant_array_like
    | value10 "." CNAME -> attribute
    | value10 "." INTEGER -> convert_int
    | value10 "(" value1 ")" -> func_call
    | value10 "[" _SEP* value2 _SEP* "]" -> array_index


symbol: CNAME
    | THIS_FUNC
    | "$" CNAME ("\\" CNAME)* -> import_
    | "$$" CNAME ("\\" CNAME)* -> c_import

%import common.ESCAPED_STRING
%import common.INT
%import common.CR
%import common.LF
%import common.CNAME
%ignore WS
WS: /[ \t\f]/+

INTEGER: INT
FLOATING: INT "." INT
ESCAPED_CHARACTER: /'\\[abfnrtv'\\]'/
HEX_CHARACTER: /'\\x[0-7][0-9a-fA-F]'/
CHARACTER: /'[^'\\]'/

MULTILINE_COMMENT: "#!" /((?!!#).|\n)*/ "!#" " "*
COMMENT: "#" /.*/
NEWLINE: (CR? LF)

THIS_FUNC: "@"
COMP_TYPE: "<=" | ">=" | "<" | ">"

_COM: COMMENT
    | MULTILINE_COMMENT

_SEP: NEWLINE
    | ";"
