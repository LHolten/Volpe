?block: _LINE* expr _LINE* _COM?

?expr: bool_1
    | CNAME "=" bool_1 _LINE+ expr -> assign
    | CNAME ":=" bool_1 _LINE+ expr -> call_assign
    | bool_1 "?" bool_1 _LINE+ expr -> cond

?bool_1: bool_2
    | bool_1 "->" bool_2 -> bool_implies

?bool_2: bool_3
    | bool_2 "||" bool_3 -> bool_or

?bool_3: comp
    | bool_3 "&&" comp -> bool_and

?comp: math_1
    | comp COMP_TYPE math_1

?math_1: math_2
    | math_1 "+" math_2 -> math_add
    | math_1 "-" math_2 -> math_sub

?math_2: func_call
    | math_2 "*" func_call -> math_mul
    | math_2 "/" func_call -> math_div
    | math_2 "%" func_call -> math_mod

?func_call: func
    | func_call func

?func: term
    | CNAME ":" func
    | "@" func -> recursion

?term: "(" _LINE* expr _LINE* ")" | distinct | flowing
    | "{" _LINE* expr (_LINE+ expr)* _LINE* "}" -> tuple
    | "[" _LINE* array (_LINE+ array)* _LINE* "]" -> array

?array: expr ("," _LINE* expr)*

?distinct: "." CNAME -> symbol
    | CHARACTER -> character
    | ESCAPED_CHARACTER -> escaped_character
    | HEX_CHARACTER -> escaped_character
    | ESCAPED_STRING -> string
    | "$" CNAME ("\\" CNAME)* -> import_
    | "$$" CNAME ("\\" CNAME)* -> c_import

?flowing: CNAME -> symbol
    | INTEGER -> integer

%import common.ESCAPED_STRING
%import common.INT
%import common.CR
%import common.LF
%import common.CNAME
%ignore WS
WS: /[ \t\f]/+

INTEGER: INT
FLOATING: INT "." INT
ESCAPED_CHARACTER: /'\\[abfnrtv'\\]'/
HEX_CHARACTER: /'\\x[0-7][0-9a-fA-F]'/
CHARACTER: /'[^'\\]'/

MULTILINE_COMMENT: "#!" /((?!!#).|\n)*/ "!#"
COMMENT: "#" /.*/
NEWLINE: (CR? LF)

COMP_TYPE: "<=" | ">=" | "<" | ">" | "==" | "!="

_COM: COMMENT
    | MULTILINE_COMMENT

_SEP: NEWLINE
    | ";"

_LINE: _COM? _SEP
