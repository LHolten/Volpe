block: _LINE_SEP* (value_ass _LINE_SEP+)* value1 _LINE_SEP*

?value_ass: value1
    | shape ":=" value1 -> assign
    | shape "+=" value1 -> add_assign
    | shape "-=" value1 -> sub_assign
    | shape "/=" value1 -> div_assign
    | shape "*=" value1 -> mul_assign
    // | shape "%=" value1 -> mod_assign
    // | shape "**=" value1 -> power_assign

value_ret: ">" value1 -> return_n

?value1: value2
    | object value1 -> func

?value2: value3
    | value2 "->" value3 -> implication
    | value2 "->" value_ret -> implication

?value3: value4
    | value3 "||" value4 -> logic_or
    | value3 "||" value_ret -> logic_or

?value4: value5
    | value4 "&&" value5 -> logic_and
    | value4 "&&" value_ret -> logic_and

?value5: value6
    | value5 "=" value6 -> equals
    | value5 "!=" value6 -> not_equals

?value6: value7
    | value6 "<=" value7 -> less_equals
    | value6 ">=" value7 -> greater_equals
    | value6 "<" value7 -> less
    | value6 ">" value7 -> greater

?value7: value8
    | value7 "+" value8 -> add
    | value7 "-" value8 -> sub

?value8: value9
    | value8 "/" value9 -> div
    | value8 "%" value9 -> mod
    | value8 "*" value9 -> mul
    // | value8 "**" value9 -> power

?value9: value10
    | "-" value9 -> negate
    | "!" value9 -> logic_not
    | "~" value9 -> convert_flt
    | value10 "." INTEGER -> convert_int
    | "|" value10 "|" -> list_size

?value10: func
    | object
    | "{" block "}"
    | INTEGER -> integer
    // | ESCAPED_STRING -> string

?func: symbol
    | func object -> func_call
    | func "[" _SEP* value1 _SEP* "]" -> list_index

?shape: symbol
    | object

symbol: CNAME
    | THIS_FUNC

object: "(" _SEP* (value_ass ("," _SEP* value_ass)* _SEP*)? ")"

%import common.ESCAPED_STRING
%import common.INT
%import common.CR
%import common.LF
%import common.CNAME
%ignore WS
WS: /[ \t\f]/+

INTEGER: INT
FLOATING: INT "." INT

MULTILINE_COMMENT: "#!" /((?!!#).|\n)*/ "!#" " "*
COMMENT: "#" /.*/
NEWLINE: (CR? LF)

THIS_FUNC: "@"

_LINE_SEP: _SEP
    | ";"

_SEP: MULTILINE_COMMENT NEWLINE
    | COMMENT NEWLINE
    | NEWLINE