?block: _LINE* super _COM?

?super: ".." bool_implies _LINE*
    | symbol "="? bool_implies (_LINE+ super | _LINE*) -> assign

?bool_implies: bool_or
    | bool_implies "->" bool_or

?bool_or: bool_and
    | bool_or "||" bool_and

?bool_and: comp
    | bool_and "&&" comp

?comp: math_1
    | comp COMP_TYPE math_1

?math_1: math_2
    | math_1 "+" math_2 -> math_add
    | math_1 "-" math_2 -> math_sub

?math_2: expr
    | math_2 "*" expr -> math_mul
    | math_2 "/" expr -> math_div
    | math_2 "%" expr -> math_mod

?expr: func | literal | symbol
    | expr "."? symbol -> attribute
    | expr "."? literal -> func_call
    | expr "."? func -> func_call

?func: term
    | symbol ":" func

?term: "(" _LINE* bool_implies ("," bool_implies)* _LINE* ")" | "{" _LINE* super "}"

?literal: INTEGER -> integer
    | CHARACTER -> character
    | ESCAPED_CHARACTER -> escaped_character
    | HEX_CHARACTER -> escaped_character
    | ESCAPED_STRING -> string

symbol: CNAME
    | THIS_FUNC
    | "$" CNAME ("\\" CNAME)* -> import_
    | "$$" CNAME ("\\" CNAME)* -> c_import

%import common.ESCAPED_STRING
%import common.INT
%import common.CR
%import common.LF
%import common.CNAME
%ignore WS
WS: /[ \t\f]/+

INTEGER: INT
FLOATING: INT "." INT
ESCAPED_CHARACTER: /'\\[abfnrtv'\\]'/
HEX_CHARACTER: /'\\x[0-7][0-9a-fA-F]'/
CHARACTER: /'[^'\\]'/

MULTILINE_COMMENT: "#!" /((?!!#).|\n)*/ "!#" " "*
COMMENT: "#" /.*/
NEWLINE: (CR? LF)

THIS_FUNC: "@"
COMP_TYPE: "<=" | ">=" | "<" | ">" | "==" | "!="

_COM: COMMENT
    | MULTILINE_COMMENT

_SEP: NEWLINE
    | ";"

_LINE: _COM? _SEP
