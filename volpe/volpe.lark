block: (value_ass? _COM? _SEP)* value1 (_COM? _SEP)* _COM?

?value_ass: value1 "!"
    | value10 ":=" value1 -> assign
    | value10 "+=" value1 -> add_assign
    | value10 "-=" value1 -> sub_assign
    | value10 "/=" value1 -> div_assign
    | value10 "*=" value1 -> mul_assign
    | value10 "%=" value1 -> mod_assign
    | value2 "->" value3 -> if_then

?value1: value2

?value2: value3
    | value2 "->" value3 -> implication

?value3: value4
    | value3 "||" value4 -> logic_or

?value4: value5
    | value4 "&&" value5 -> logic_and

?value5: value6
    | value5 "=" value6 -> equals
    | value5 "!=" value6 -> not_equals

?value6: value7
    | value6 "<=" value7 -> less_equals
    | value6 ">=" value7 -> greater_equals
    | value6 "<" value7 -> less
    | value6 ">" value7 -> greater

?value7: value8
    | value7 "+" value8 -> add
    | value7 "-" value8 -> sub

?value8: value9
    | value8 "/" value9 -> div
    | value8 "%" value9 -> mod
    | value8 "*" value9 -> mul

?value9: value10
    | "-" value9 -> negate
    | "!" value9 -> logic_not
    | "~" value9 -> convert_flt
    | value9 "." INTEGER -> convert_int
    | "|" value10 "|" -> list_size
    | value9 "::" value10 -> concatenate

?value10: symbol
    | INTEGER -> integer
    | CHARACTER -> character
    | ESCAPED_CHARACTER -> escaped_character
    | ESCAPED_STRING -> string
    | "(" shapes ")" "{" block "}" -> func
    | "{" _SEP* value1 "," (_SEP* value1 ("," _SEP* value1)*)? _SEP* "}" -> object
    | "{" _SEP* "}" -> object
    | "{" block "}"
    | "(" value1 ")"
    | "[" (_SEP* value1 ("," _SEP* value1)*)? _SEP* "]" -> list
    | value10 "." CNAME -> attribute
    | value10 "(" values ")" -> func_call
    | value10 "[" _SEP* value1 _SEP* "]" -> list_index

values: (_SEP* value1 ("," _SEP* value1)*)? _SEP* -> object
shapes: (_SEP* value10 ("," _SEP* value10)*)? _SEP* -> object

symbol: CNAME
    | "&" CNAME -> linear
    | THIS_FUNC
    | IMPORT

%import common.ESCAPED_STRING
%import common.INT
%import common.CR
%import common.LF
%import common.CNAME
%ignore WS
WS: /[ \t\f]/+

INTEGER: INT
FLOATING: INT "." INT
ESCAPED_CHARACTER: /'\\[abfnrtv'\\]'/
CHARACTER: /'[^'\\]'/

MULTILINE_COMMENT: "#!" /((?!!#).|\n)*/ "!#" " "*
COMMENT: "#" /.*/
NEWLINE: (CR? LF)

THIS_FUNC: "@"
IMPORT: "$" CNAME

_COM: COMMENT
    | MULTILINE_COMMENT

_SEP: NEWLINE
    | ";"