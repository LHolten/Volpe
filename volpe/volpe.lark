?block: _LINE* super

?super: "." (expr | operator) _LINE*
    | arg_s MATH_TYPE? "="? (expr | operator) (_LINE+ super | _LINE*) -> assign

?expr: symbol | literal | "{" block "}"
    | expr symbol -> attribute
    | expr arg -> func_call
    | operator arg_s -> func_call
    | brackets arg_s -> func

?operator: expr BOOL_TYPE -> bool
    | expr COMP_TYPE -> comp
    | expr MATH_TYPE -> math

?arg_s: arg | symbol
?arg: literal | brackets | "{" block "}"

?brackets: "(" (expr | operator) ")"

?literal: INTEGER -> integer
    | CHARACTER -> character
    | ESCAPED_CHARACTER -> escaped_character
    | HEX_CHARACTER -> escaped_character
    | ESCAPED_STRING -> string

symbol: CNAME
    | THIS_FUNC
    | "$" CNAME ("\\" CNAME)* -> import_
    | "$$" CNAME ("\\" CNAME)* -> c_import

%import common.ESCAPED_STRING
%import common.INT
%import common.CR
%import common.LF
%import common.CNAME
%ignore WS
WS: /[ \t\f]/+

INTEGER: INT
FLOATING: INT "." INT
ESCAPED_CHARACTER: /'\\[abfnrtv'\\]'/
HEX_CHARACTER: /'\\x[0-7][0-9a-fA-F]'/
CHARACTER: /'[^'\\]'/

MULTILINE_COMMENT: "#!" /((?!!#).|\n)*/ "!#" " "*
COMMENT: "#" /.*/
NEWLINE: (CR? LF)

THIS_FUNC: "@"
COMP_TYPE: "<=" | ">=" | "<" | ">" | "==" | "!="
MATH_TYPE: "+" | "-" | "*" | "/" | "%"
BOOL_TYPE: "->" | "||" | "&&"

_COM: COMMENT
    | MULTILINE_COMMENT

_SEP: NEWLINE
    | ";"

_LINE: _COM? _SEP
