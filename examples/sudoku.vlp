true := 1 > 0
false := !true

# get a arr (~bitmap) where bool at index represents if number (index + 1) is possible
get_possible := (board, pos) {
    x := pos % 9
    y := pos / 9
    square_x := (x / 3) * 3
    square_y := (y / 3) * 3
    
    possible := [true, true, true, true, true, true, true, true, true]

    # row pass
    possible := (i, possible) {
        i = 9 -> possible
        num := board[y*9 + i]
        num = 0 -> @(i + 1, possible)
        possible[num - 1] := false
        @(i + 1, possible)
    } (0, possible)

    # column pass
    possible := (i, possible) {
        i = 9 -> possible
        num := board[i*9 + x]
        num = 0 -> @(i + 1, possible)
        possible[num - 1] := false
        @(i + 1, possible)
    } (0, possible)

    # square pass
    (i, possible) {
        i = 3 -> possible
        possible := (j, possible) {
            j = 3 -> possible
            num := board[(square_y + i)*9 + (square_x + j)]
            num = 0 -> @(j + 1, possible)
            possible[num - 1] := false
            @(j + 1, possible)
        } (0, possible)
        @(i + 1, possible)
    } (0, possible)
}

empty_sudoku := [
    0,0,0, 0,0,0, 0,0,0,
    0,0,0, 0,0,0, 0,0,0,
    0,0,0, 0,0,0, 0,0,0,

    0,0,0, 0,0,0, 0,0,0,
    0,0,0, 0,0,0, 0,0,0,
    0,0,0, 0,0,0, 0,0,0,

    0,0,0, 0,0,0, 0,0,0,
    0,0,0, 0,0,0, 0,0,0,
    0,0,0, 0,0,0, 0,0,0
]

solve := (board) {
    solve := @
    false -> false, empty_sudoku
    (pos) {
        # no zeros found, we have a solution!
        pos = |board| -> true, board
        # look for unfilled spot
        board[pos] = 0 -> {
            possible := get_possible(board, pos)
            (i) {
                # we tried all possible and none of them led to solutions
                # so one of the previous steps was bad
                i = 9 -> false, empty_sudoku

                # skip this index if this number is possible
                !possible[i] -> @(i + 1)

                # try this number in this position
                board[pos] := i + 1
                found_solution, solution := solve(board)

                # we found a solution!
                found_solution -> true, solution

                # try again with the next number
                @(i + 1)
            } (0)
        }
        @(pos + 1)
    } (0)
}

sudoku := [
    5,3,0, 0,7,0, 0,0,0,
    6,0,0, 1,9,5, 0,0,0,
    0,9,8, 0,0,0, 0,6,0,

    8,0,0, 0,6,0, 0,0,3,
    4,0,0, 8,0,3, 0,0,1,
    7,0,0, 0,2,0, 0,0,6,

    0,6,0, 0,0,0, 2,8,0,
    0,0,0, 4,1,9, 0,0,5,
    0,0,0, 0,8,0, 0,7,9
]

solve(sudoku)
