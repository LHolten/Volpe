p := $printf

last_digit := (x) {
    n := x % 10
    n = 0 -> '0'
    n = 1 -> '1'
    n = 2 -> '2'
    n = 3 -> '3'
    n = 4 -> '4'
    n = 5 -> '5'
    n = 6 -> '6'
    n = 7 -> '7'
    n = 8 -> '8'
    '9'
}

int_to_str := (x) {
    str := (n, str) {
        new_n := n / 10
        new_n = n -> {|str| > 0 -> str; "0"}
        char := last_digit(n)
        @(new_n, [char] :: str)
    } ({x < 0 -> -x; x}, [])
    x < 0 -> "-" :: str
    str
}

pow := (a, n) {
    (base, product, power) {
        power = 0 -> product
        @(base, product * base, power - 1)
    } (a, 1, n)
}

char_to_int := (c) {
    c = '1' -> 1
    c = '2' -> 2
    c = '3' -> 3
    c = '4' -> 4
    c = '5' -> 5
    c = '6' -> 6
    c = '7' -> 7
    c = '8' -> 8
    c = '9' -> 9
    0
}

str_to_int := (str) {
    |str| = 0 -> 0
    negative := str[0] = '-'
    int_len := |str| - 1
    int := (i, int) {
        i = |str| -> int
        digit := char_to_int(str[i])
        to_add := digit * pow(10, int_len - i)
        @(i + 1, int + to_add)
    } ({negative -> 1; 0}, 0)
    negative -> -int
    int
}

fizzbuzz := (n) {
    (i) {
        i > n -> "ok"
        _ := {
            i % 15 = 0 -> p("FizzBuzz\n")
            i % 5 = 0 -> p("Buzz\n")
            i % 3 = 0 -> p("Fizz\n")
            p(int_to_str(i) :: "\n")
        }
        @(i + 1)
    } (1)
}

# we return a function so that it can be used as a command line program
# usage: fizzbuzz.exe 100
(args) {
    fizzbuzz(str_to_int(args[1]))
}
