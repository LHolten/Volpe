code: _LINESEP* (value (_LINESEP+ value)* _LINESEP*)?

?value: value1
    | symbol "=" value1 -> assign
    | symbol "+=" value1 -> add_assign
    | symbol "-=" value1 -> sub_assign
    | symbol "/=" value1 -> div_assign
    | symbol "*=" value1 -> mul_assign

?value1: value2
    | value2 "->" value1 -> implication
    | symbol "=>" value1 -> func

?value2: value3
    | value2 "||" value3 -> logic_or

?value3: value4
    | value3 "&&" value4 -> logic_and

?value4: value5
    | ":>" value1 -> returnn

?value5: value6
    | value5 "==" value6 -> equals
    | value5 "!=" value6 -> not_equals

?value6: value7
    | value6 "<=" value7 -> less_equals
    | value6 ">=" value7 -> greater_equals
    | value6 "<" value7 -> less
    | value6 ">" value7 -> greater

?value7: value8
    | value7 "+" value8 -> add
    | value7 "-" value8 -> sub

?value8: value9
    | value8 "/" value9 -> div
    | value8 "%" value9 -> mod
    | value8 "*" value9 -> mul
    | value8 "**" value9 -> pow

?value9: value10
    | "-" value9 -> negate
    | "!" value9 -> logic_not
    // | value2 ".." value2 -> number_list
    // | value2 "::" value2 -> map

?value10: symbol
    | value10 tuple -> func_call
    | "{" code "}"
    | NUMBER -> number
    | ESCAPED_STRING -> string
    | "@" -> this_func

?symbol: WORD -> symbol
    | tuple
    | list

?tuple: "(" (value1 ("," value1)*)? ")"
list: "[" (value1 ("," value1)*)? "]"

%import common.ESCAPED_STRING
%import common.INT
%import common.WS
%import common.CR
%import common.LF
%ignore WS

WORD: /[_a-zA-Z][_a-zA-Z0-9]*/

NUMBER: INT | INT "." INT

MULTILINE_COMMENT: "#!" /((?!!#).|\n)*/ "!#" " "*
COMMENT: "#" /.*/
NEWLINE: (CR? LF)

_LINESEP: MULTILINE_COMMENT NEWLINE
    | COMMENT NEWLINE
    | NEWLINE
    | ";"